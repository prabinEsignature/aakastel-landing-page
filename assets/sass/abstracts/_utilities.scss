// ----------------------------------------
// MIXINS AND GENERATORS
// ----------------------------------------
// Color Utilities Generator
@mixin generate-color-classes($color-map, $prefix, $property) {
  @each $color-name, $color in $color-map {
    #{$prefix}-#{"" + $color-name} {
      #{$property}: $color !important;
    }
  }
}

@include generate-color-classes($colors, ".text", "color");
@include generate-color-classes($colors, ".bg", "background-color");
@include generate-color-classes($grayscale, ".text", "color");
@include generate-color-classes($grayscale, ".bg", "background-color");

// Font Weight Utilities Generator
@mixin generate-font-weight-classes($prefix, $property) {
  @each $weight-name, $weight in $font-weights {
    #{$prefix}-#{$weight-name} {
      #{$property}: $weight !important;
    }
  }
}

@include generate-font-weight-classes(".font", "font-weight");

// Opacity Utilities Generator
@mixin generate-opacity-classes($prefix, $property, $step: 5) {
  @for $i from 0 through 20 {
    #{$prefix}-#{$i * $step} {
      @if #{$i * $step} == "100" {
        #{$property}: 1;
      } @else {
        #{$property}: unquote("0." + #{$i * $step});
      }
    }
  }
}

@include generate-opacity-classes(".opacity", "opacity");

// ----------------------------------------
// ADVANCED TYPOGRAPHY
// ----------------------------------------
// FONT STACK CLASSES
$font-families: (
  karla: $font-family-karla
);

@mixin font-families($fonts) {
  @each $font-name, $font-family in $fonts {
    .font-#{$font-name} {
      font-family: $font-family;
    }
  }
}

@include font-families($font-families);
// ----------------------------------------
// MISCELLANEOUS UTILITIES
// ----------------------------------------
// Smooth Fading
.fade-on-hover:hover {
  opacity: 0.9;
  transition: $default-transition;
}

// Remove Transition on Window Resize
.resize-animation-stopper * {
  -webkit-animation: none !important;
  animation: none !important;
  transition: none !important;
}

// Overflow Handling
$overflow-values: (auto, hidden, clip, visible, scroll);
@each $value in $overflow-values {
  .overflow-#{$value} {
    overflow: #{$value};
  }
  .overflow-x-#{$value} {
    overflow-x: #{$value};
  }
  .overflow-y-#{$value} {
    overflow-y: #{$value};
  }
}

// Dimension Utilities
$dimension-properties: (
  0: 0,
  100: 100%,
  100vh: 100vh
);

// Mixin to generate max/min width and height classes
@mixin dimension-classes($prefix, $property, $dimensions) {
  @each $dimension-name, $dimension-value in $dimensions {
    .#{$prefix}-#{$dimension-name} {
      #{$property}: $dimension-value !important;
    }
  }
}

// Generate max/min width and height classes using the mixin
@include dimension-classes("max-w", "max-width", $dimension-properties);
@include dimension-classes("max-h", "max-height", $dimension-properties);
@include dimension-classes("min-w", "min-width", $dimension-properties);
@include dimension-classes("min-h", "min-height", $dimension-properties);

// Transition Utilities
.default-transition {
  transition: $default-transition;
}

// Cursor Utilities
$cursor-styles: (
  pointer: pointer,
  default: default,
  help: help,
  wait: wait,
  text: text,
  grab: grab,
  move: move,
  not-allowed: not-allowed,
  crosshair: crosshair,
  none: none
);

@mixin cursor-classes($styles) {
  @each $style-name, $style-value in $styles {
    .cursor-#{$style-name} {
      cursor: $style-value !important;
    }
  }
}

@include cursor-classes($cursor-styles);

// Resize Utilities
$resize-directions: (none, vertical, horizontal, both);

@each $direction in $resize-directions {
  .resize-#{$direction} {
    resize: $direction;
  }
}

// Object Fitting Utilities
$object-fits: (contain, cover, fill, none, scale-down);

@each $fit in $object-fits {
  .object-#{$fit} {
    object-fit: $fit;
  }
}

// Object Position Utilities
$object-positions: (bottom, center, left, left-bottom, left-top, right, right-bottom, right-top, top);

@each $position in $object-positions {
  .object-#{$position} {
    object-position: str-replace($position, "-", " ");
  }
}

// Flex Utilities
$flex-classes: (
  "flex-1": 1 1 0%,
  "flex-auto": 1 1 auto,
  "flex-initial": 0 1 auto,
  "flex-none": none
);

@each $class, $value in $flex-classes {
  .#{$class} {
    flex: #{$value};
  }
}

// Grid Utilities
@mixin responsive-grid-template($n) {
  @for $i from 1 through $n {
    .grid-cols-#{$i} {
      grid-template-columns: repeat(#{$i}, 1fr);
    }

    @each $breakpoint, $size in $breakpoints-down {
      .#{$breakpoint}-grid-cols-#{$i} {
        @media (min-width: $size) {
          grid-template-columns: repeat(#{$i}, 1fr);
        }
      }
    }
  }
}

@include responsive-grid-template(12);

// Responsive Grid Column Utilities
// Responsive Grid Column Utilities
$grid-column-classes: (
  span: (
    "col-auto": "auto",
    "col-span-1": "span 1 / span 1",
    "col-span-2": "span 2 / span 2",
    "col-span-3": "span 3 / span 3",
    "col-span-4": "span 4 / span 4",
    "col-span-5": "span 5 / span 5",
    "col-span-6": "span 6 / span 6",
    "col-span-7": "span 7 / span 7",
    "col-span-8": "span 8 / span 8",
    "col-span-9": "span 9 / span 9",
    "col-span-10": "span 10 / span 10",
    "col-span-11": "span 11 / span 11",
    "col-span-12": "span 12 / span 12",
    "col-span-full": "1 / -1"
  ),
  start: (
    "col-start-1": "1",
    "col-start-2": "2",
    "col-start-3": "3",
    "col-start-4": "4",
    "col-start-5": "5",
    "col-start-6": "6",
    "col-start-7": "7",
    "col-start-8": "8",
    "col-start-9": "9",
    "col-start-10": "10",
    "col-start-11": "11",
    "col-start-12": "12",
    "col-start-13": "13",
    "col-start-auto": "auto"
  ),
  end: (
    "col-end-1": "1",
    "col-end-2": "2",
    "col-end-3": "3",
    "col-end-4": "4",
    "col-end-5": "5",
    "col-end-6": "6",
    "col-end-7": "7",
    "col-end-8": "8",
    "col-end-9": "9",
    "col-end-10": "10",
    "col-end-11": "11",
    "col-end-12": "12",
    "col-end-13": "13",
    "col-end-auto": "auto"
  )
);

// Generate Grid Column Classes
@each $type, $classes in $grid-column-classes {
  @each $class, $value in $classes {
    .#{$class} {
      grid-#{$type}: #{$value};
    }
  }
}

// Grid Row Utilities
$grid-row-classes: (
  span: (
    "row-auto": "auto",
    "row-span-1": "span 1 / span 1",
    "row-span-2": "span 2 / span 2",
    "row-span-3": "span 3 / span 3",
    "row-span-4": "span 4 / span 4",
    "row-span-5": "span 5 / span 5",
    "row-span-6": "span 6 / span 6",
    "row-span-7": "span 7 / span 7",
    "row-span-8": "span 8 / span 8",
    "row-span-9": "span 9 / span 9",
    "row-span-10": "span 10 / span 10",
    "row-span-11": "span 11 / span 11",
    "row-span-12": "span 12 / span 12",
    "row-span-full": "1 / -1"
  ),
  start: (
    "row-start-1": "1",
    "row-start-2": "2",
    "row-start-3": "3",
    "row-start-4": "4",
    "row-start-5": "5",
    "row-start-6": "6",
    "row-start-7": "7",
    "row-start-8": "8",
    "row-start-9": "9",
    "row-start-10": "10",
    "row-start-auto": "auto"
  ),
  end: (
    "row-end-1": "1",
    "row-end-2": "2",
    "row-end-3": "3",
    "row-end-4": "4",
    "row-end-5": "5",
    "row-end-6": "6",
    "row-end-7": "7",
    "row-end-8": "8",
    "row-end-9": "9",
    "row-end-10": "10",
    "row-end-auto": "auto"
  )
);

// Generate Grid Row Classes
@each $type, $classes in $grid-row-classes {
  @each $class, $value in $classes {
    .#{$class} {
      grid-#{$type}: #{$value};
    }
  }
}

/* TEXT UTILS - CLAMP */
@for $i from 1 through 4 {
  .clamp-line-#{$i} {
    @include clamp(#{$i});
  }
}

/* TRANSFORMATION */
$rotations: (
  0: 0deg,
  1: 1deg,
  2: 2deg,
  3: 3deg,
  6: 6deg,
  12: 12deg,
  45: 45deg,
  90: 90deg,
  180: 180deg
);

@each $key, $value in $rotations {
  .rotate-#{$key} {
    transform: rotate(#{$value});
  }
}

// Generate Border Radius Utilities
@mixin generate-border-radius-classes($prefix) {
  @for $i from 0 through 20 {
    .#{$prefix}-#{$i} {
      border-radius: #{$i}px !important;
    }
    .#{$prefix}-tl-#{$i} {
      border-top-left-radius: #{$i}px !important;
    }
    .#{$prefix}-tr-#{$i} {
      border-top-right-radius: #{$i}px !important;
    }
    .#{$prefix}-bl-#{$i} {
      border-bottom-left-radius: #{$i}px !important;
    }
    .#{$prefix}-br-#{$i} {
      border-bottom-right-radius: #{$i}px !important;
    }
    .#{$prefix}-t-#{$i} {
      border-top-left-radius: #{$i}px !important;
      border-top-right-radius: #{$i}px !important;
    }
    .#{$prefix}-b-#{$i} {
      border-bottom-left-radius: #{$i}px !important;
      border-bottom-right-radius: #{$i}px !important;
    }
    .#{$prefix}-l-#{$i} {
      border-top-left-radius: #{$i}px !important;
      border-bottom-left-radius: #{$i}px !important;
    }
    .#{$prefix}-r-#{$i} {
      border-top-right-radius: #{$i}px !important;
      border-bottom-right-radius: #{$i}px !important;
    }
  }
}

@include generate-border-radius-classes("rounded");

.rounded-t-80 {
  border-top-right-radius: 80px !important;
  border-top-left-radius: 80px !important;
}
.rounded-100 {
  border-radius: 100px;
}
.rounded-100vh {
  border-radius: 100vh !important;
}
.rounded-full {
  border-radius: 100% !important;
}

// WIDTH & HEIGHT
$wahrem-step: 0.5; // Step increment
$wahrem-step: 0.5;
// 5%, 10%, 15% .... 100%

@for $i from 0 through 20 {
  .w-#{$i * 10 * $wahrem-step} {
    width: #{calc($i * $wahrem-step * 10) + "%"} !important;
  }

  .h-#{$i * 10 * $wahrem-step} {
    height: #{calc($i * $wahrem-step * 10) + "%"} !important;
  }
}

// GAP
$gap-start: 4px;
$gap-increment: 4px;
$gap-count: 10;

.gap-x-05 {
  column-gap: 2px;
}

@for $i from 1 through $gap-count {
  .gap-#{$i} {
    gap: $gap-start + ($i - 1) * $gap-increment !important;
  }
  .gap-y-#{$i} {
    row-gap: $gap-start + ($i - 1) * $gap-increment;
  }
  .gap-x-#{$i} {
    column-gap: $gap-start + ($i - 1) * $gap-increment;
  }
}

// SECTION PADDINGS & MARGINS
$spacing-values: (
  32: 32px,
  40: 40px,
  60: 60px,
  80: 80px,
  100: 100px,
  120: 120px,
  160: 160px,
  200: 200px
);

$breakpoints: (
  xxl: 10px,
  xl: 12px,
  lg: 16px,
  md: 20px,
  sm: 24px
);

@each $size, $value in $spacing-values {
  // Decrease the value by a large amount if the size is greater than 60
  $adjusted-value: if($size > 60, $value * 0.7, $value); // Adjust value by 30% reduction

  @each $property in (p, m) {
    $css-property: if($property == p, padding, margin);

    // All vertical directions (top, bottom)
    .segment-#{$property}y-#{$size} {
      #{$css-property}-top: $value;
      #{$css-property}-bottom: $value;

      @each $breakpoint, $offset in $breakpoints {
        @include breakpoint-down($breakpoint) {
          #{$css-property}-top: calc(#{$adjusted-value} - #{$offset});
          #{$css-property}-bottom: calc(#{$adjusted-value} - #{$offset});
        }
      }
    }

    // Top only
    .segment-#{$property}t-#{$size} {
      #{$css-property}-top: $value;

      @each $breakpoint, $offset in $breakpoints {
        @include breakpoint-down($breakpoint) {
          #{$css-property}-top: calc(#{$adjusted-value} - #{$offset});
        }
      }
    }

    // Bottom only
    .segment-#{$property}b-#{$size} {
      #{$css-property}-bottom: $value;

      @each $breakpoint, $offset in $breakpoints {
        @include breakpoint-down($breakpoint) {
          #{$css-property}-bottom: calc(#{$adjusted-value} - #{$offset});
        }
      }
    }
  }
}

@mixin display-utilities {
  .show-block {
    @extend %display-block;
  }
  .show-flex {
    @extend %display-flex;
  }
  .hide {
    @extend %display-none;
  }
}

@include display-utilities;

// NEGATIVE MARGINS
$negative-margin-values: (
  1: 4px,
  2: 8px,
  3: 12px
);

@each $key, $value in $negative-margin-values {
  .-mt-#{$key} {
    margin-top: -#{$value};
  }
  .-mb-#{$key} {
    margin-bottom: -#{$value};
  }
  .-ms-#{$key} {
    margin-left: -#{$value};
  }
  .-me-#{$key} {
    margin-right: -#{$value};
  }
}

$font-size-breakpoints: (
  "xl": "1199.98px",
  "lg": "991.98px",
  "md": "767.98px",
  "sm": "575.98px",
  "xs": "479.98px"
);

// Mixin to generate margin and padding classes
@mixin generate-spacing-classes($property, $prefix) {
  @each $key, $value in $sizes {
    .#{$prefix}t-custom-#{$key} {
      #{$property}-top: #{$value};
    }
    .#{$prefix}b-custom-#{$key} {
      #{$property}-bottom: #{$value};
    }
    .#{$prefix}s-custom-#{$key} {
      #{$property}-left: #{$value};
    }
    .#{$prefix}e-custom-#{$key} {
      #{$property}-right: #{$value};
    }
    .#{$prefix}x-custom-#{$key} {
      #{$property}-left: #{$value};
      #{$property}-right: #{$value};
    }
    .#{$prefix}y-custom-#{$key} {
      #{$property}-top: #{$value};
      #{$property}-bottom: #{$value};
    }
    .#{$prefix}-custom-#{$key} {
      #{$property}: #{$value};
    }
  }
}

@mixin generate-spacing-breakpoint-classes($property, $prefix) {
  @each $key, $value in $sizes {
    @each $breakpoint, $breakpoint-width in $font-size-breakpoints {
      @media (max-width: #{$breakpoint-width}) {
        .#{$prefix}t-custom-#{$breakpoint}-#{$key} {
          #{$property}-top: #{$value} !important;
        }
        .#{$prefix}b-custom-#{$breakpoint}-#{$key} {
          #{$property}-bottom: #{$value} !important;
        }
        .#{$prefix}s-custom-#{$breakpoint}-#{$key} {
          #{$property}-left: #{$value} !important;
        }
        .#{$prefix}e-custom-#{$breakpoint}-#{$key} {
          #{$property}-right: #{$value} !important;
        }
        .#{$prefix}x-custom-#{$breakpoint}-#{$key} {
          #{$property}-left: #{$value} !important;
          #{$property}-right: #{$value} !important;
        }
        .#{$prefix}y-custom-#{$breakpoint}-#{$key} {
          #{$property}-top: #{$value} !important;
          #{$property}-bottom: #{$value} !important;
        }
        .#{$prefix}-custom-#{$breakpoint}-#{$key} {
          #{$property}: #{$value} !important;
        }
      }
    }
  }
}

// Generate padding and margin classes
@include generate-spacing-classes(padding, p);
@include generate-spacing-classes(margin, m);
@include generate-spacing-breakpoint-classes(padding, p);
@include generate-spacing-breakpoint-classes(margin, m);

$border-colors: (
  timberwolf: color("timberwolf"),
  primary: color("primary"),
  gray: color("gray")
);

$directions: (
  "": null,
  "b-": bottom,
  "t-": top,
  "r-": right,
  "l-": left
);

$border-widths: (
  1: 1px,
  2: 2px,
  3: 3px,
  4: 4px,
  5: 5px,
  6: 6px,
  7: 7px,
  8: 8px,
  9: 9px,
  10: 10px
);

@each $color-name, $color-value in $colors {
  @each $direction-prefix, $direction-name in $directions {
    @each $width-key, $width-value in $border-widths {
      .border-#{$direction-prefix}#{$color-name}-#{$width-key} {
        @if ($direction-name) {
          border-#{$direction-name}: #{$width-value} solid #{$color-value} !important;
        } @else {
          border: #{$width-value} solid #{$color-value} !important;
        }
      }
    }
  }
}

// Shadows Configuration
$shadows: (
  "sm": 0 1px 2px 0 rgba(0, 0, 0, 0.05),
  "base": (
    // Added a name for the default shadow
    0 1px 3px 0 rgba(0, 0, 0, 0.1),
    0 1px 2px -1px rgba(0, 0, 0, 0.1)
  ),
  "md": (
    0 4px 6px -1px rgba(0, 0, 0, 0.1),
    0 2px 4px -2px rgba(0, 0, 0, 0.1)
  ),
  "lg": (
    0 10px 15px -3px rgba(0, 0, 0, 0.1),
    0 4px 6px -4px rgba(0, 0, 0, 0.1)
  ),
  "xl": (
    0 20px 25px -5px rgba(0, 0, 0, 0.1),
    0 8px 10px -6px rgba(0, 0, 0, 0.1)
  ),
  "2xl": 0 25px 50px -12px rgba(0, 0, 0, 0.25),
  "default": 0px 4px 28px 0px rgba(0, 0, 0, 0.08),
  "inner": inset 0 2px 4px 0 rgba(0, 0, 0, 0.05),
  "none": none
);

// Utility Classes for Shadows
@each $key, $value in $shadows {
  .shadow-#{$key} {
    box-shadow: $value;
  }
}

// LINE HEIGHTS
$leading-classes: (
  "leading-3": 0.75rem,
  // 12px
  "leading-4": 1rem,
  // 16px
  "leading-5": 1.25rem,
  // 20px
  "leading-6": 1.5rem,
  // 24px
  "leading-7": 1.75rem,
  // 28px
  "leading-8": 2rem,
  // 32px
  "leading-9": 2.25rem,
  // 36px
  "leading-10": 2.5rem,
  // 40px
  "leading-none": 1,
  "leading-tight": 1.25,
  "leading-snug": 1.375,
  "leading-normal": 1.5,
  "leading-relaxed": 1.625,
  "leading-loose": 2
);

@each $class, $value in $leading-classes {
  .#{$class} {
    line-height: $value;
  }
}

$tracking-classes: (
  "tracking-tighter": -0.05em,
  "tracking-tight": -0.025em,
  "tracking-normal": 0em,
  "tracking-wide": 0.025em,
  "tracking-wider": 0.05em,
  "tracking-widest": 0.1em,
  "tracking-04": -0.04em,
  "tracking-06": -0.06em,
  "tracking-03": -0.03em
);

@each $class, $value in $tracking-classes {
  .#{$class} {
    letter-spacing: $value !important;
  }
}

// After & Before - Utility Classes
.after-none {
  &::after {
    display: none !important;
  }
}

.before-none {
  &::before {
    display: none !important;
  }
}

.btn {
  &-transparent-white {
    .btn-icon,
    img {
      filter: invert(0) brightness(100);
    }
  }
}

code {
  &.code-customized {
    white-space: break-spaces;
    font-family: $font-family-karla;
  }
}

.resize-animation-stopper * {
  animation: none !important;
  transition: none !important;
}

.hover-underline {
  &:hover {
    text-decoration: underline !important;
  }
}

.no-scroll {
  overflow: hidden;
  height: 100vh;
}

// VIDEO
/* 16:9 Aspect Ratio Container */
.video-container {
  position: relative;
  width: 100%;
  padding-top: 56.25%; /* 16:9 Aspect Ratio (9 / 16 = 0.5625 * 100) */
  overflow: hidden;
  background: #b5ccd0;
  border-radius: 8px;
}

/* Responsive Video */
.video-container video {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}
