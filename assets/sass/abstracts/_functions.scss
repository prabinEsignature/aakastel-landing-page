@use "sass:math";
@use "sass:color";

// Configuration Variables
$font-size-base: 16px; // Base font size for rem conversions

// Color Utility Functions
@function set-text-color($color, $light-threshold: 40%) {
  @return if(color.lightness($color) > $light-threshold, #000, #fff);
}

@function set-button-text-color($color, $light-threshold: 40%) {
  @return if(color.lightness($color) > $light-threshold, black, white);
}

// Color Manipulation Functions
@function black($opacity) {
  @return rgba(#000, $opacity);
}

@function white($opacity) {
  @return rgba(#fff, $opacity);
}

@function rgba-color($color, $opacity) {
  @return color.change($color, $alpha: $opacity);
}

@function tint($color, $percentage) {
  @return mix(#fff, $color, $percentage);
}

@function shade($color, $percentage) {
  @return mix(#000, $color, $percentage);
}

@function dynamic-tint-shade($color, $percentage) {
  @if ($percentage > 0) {
    @return tint($color, $percentage);
  } @else {
    @return shade($color, abs($percentage));
  }
}

@function adjust-saturation($color, $percentage) {
  @return color.scale($color, $saturation: $percentage);
}

@function complementary($color) {
  $hue: hue($color) + 180;
  @return hsl($hue % 360, saturation($color), lightness($color));
}

@function lighten-color($color, $percentage) {
  @return color.scale($color, $lightness: $percentage);
}

@function darken-color($color, $percentage) {
  @return color.scale($color, $lightness: -$percentage);
}

@function adjust-alpha($color, $alpha) {
  @return color.change($color, $alpha: $alpha);
}

@function blend-colors($color1, $color2, $weight: 50%) {
  @return mix($color1, $color2, $weight);
}

// Mathematical Functions
@function half($num) {
  @return math.div($num, 2);
}

@function multiply($num, $factor) {
  @return math.multiply($num, $factor);
}

@function percentage($value, $total) {
  @return math.div($value, $total) * 100%;
}

// Conversion Functions
@function convert-to-rem($px-value) {
  $rem-value: math.div($px-value, $font-size-base);
  $zero-safe-rem-value: if($px-value == 0, 0, $rem-value);
  @return $zero-safe-rem-value;
}

@function px-to-percent($px-value, $base: 16px) {
  @return math.div($px-value, $base) * 100%;
}

@function rem($px-values) {
  $rem-values: ();
  @each $px-value in $px-values {
    $rem-values: append($rem-values, convert-to-rem($px-value));
  }
  @return $rem-values;
}

// Spacing Utilities
@function spacing($factor) {
  $base-spacing: 8px;
  @return math.div($factor * $base-spacing, 1);
}

// Typography Utilities
@function calculate-line-height($font-size, $line-height-ratio: 1.5) {
  @return $font-size * $line-height-ratio;
}

@function responsive-font($min-font, $max-font, $min-screen: 320px, $max-screen: 1200px) {
  @return calc(#{$min-font} + (#{$max-font} - #{$min-font}) * ((100vw - #{$min-screen}) / (#{$max-screen} - #{$min-screen})));
}

// String Replacement Function
@function str-replace($string, $search, $replace: "") {
  $index: str-index($string, $search);
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace +
      str-replace(
        str-slice($string, $index + str-length($search)),
        $search,
        $replace
      );
  }
  @return $string;
}

@function capitalize($string) {
  @return to-upper-case(str-slice($string, 1, 1)) + str-slice($string, 2);
}

@function to-kebab-case($string) {
  @return str-replace($string, " ", "-");
}

// Border and Radius Utilities
@function calculate-radius($size) {
  $base-radius: 4px;
  @return math.div($size * $base-radius, 1);
}

@function border-style($width: 1px, $style: solid, $color: black) {
  @return #{$width} #{$style} #{$color};
}

// Easing Function
@function ease($key) {
  @if map-has-key($ease, $key) {
    @return map-get($ease, $key);
  }

  @warn "Unkown '#{$key}' in $ease-map.";
  @return null;
}

// .example {
//   animation: there-and-back 2.5s ease(in-quad) infinite alternate;
// }

// Lighten/Darken with Dynamic Adjustment
@function dynamic-lighten-darken($color, $percentage) {
  @if $percentage > 0 {
    @return color.scale($color, $lightness: $percentage);
  } @else {
    @return color.scale($color, $lightness: $percentage * -1);
  }
}

// Function to get a lighter shade of a color
@function lighten-color($color-name, $percentage) {
  @return lighten(color($color-name), $percentage);
}

// Function to get a darker shade of a color
@function darken-color($color-name, $percentage) {
  @return darken(color($color-name), $percentage);
}

// Function to adjust the alpha of a color
@function adjust-alpha($color-name, $alpha) {
  @return rgba(color($color-name), $alpha);
}

@function line-height($line-height, $font-size) {
  @return $line-height / $font-size;
}